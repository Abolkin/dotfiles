#!/bin/bash

# A quick script to set-up Arch Linux with the software that I need after going through a fresh install.

# The script currently installs the necessary packages to run Hyprland.
# There is no error checking, though a log file will be generated as the script executes.
# -- This script is meant to be run on a fresh install of Arch Linux on physical hardware.

# Set some colors for log messages
CNT="[\e[1;36mNOTE\e[0m]"
COK="[\e[1;32mOK\e[0m]"
CER="[\e[1;31mERROR\e[0m]"
CAT="[\e[1;37mATTENTION\e[0m]"
CWR="[\e[1;35mWARNING\e[0m]"
CAC="[\e[1;33mACTION\e[0m]"
INSTLOG="install.log"

# Necessary packages
necessary_packages=(
    qt5-wayland
    qt5ct
    qt6-wayland
    qt6ct
    qt5-svg
    qt5-quickcontrols2
    qt5-graphicaleffects
    gtk3
    polkit-gnome
    pipewire
    wireplumber
    jq
    wl-clipboard
    cliphist
    python-requests
    pacman-contrib
    linux-headers
)

# NVIDIA GPU Packages
nvidia_packages=(
    nvidia-dkms
    nvidia-settings
    libva
    libva-nvidia-driver-git
)

# Optional packages
optional_packages=(
    kitty
    mako
    waybar
    swww
    swaylock-effects
    wofi
    wlogout
    xdg-desktop-portal-hyprland
    swappy
    grim
    slurp
    thunar
    btop
    firefox
    thunderbird
    mpv
    pamixer
    pavucontrol
    brightnessctl
    bluez
    bluez-utils
    blueman
    network-manager-applet
    gvfs
    thunar-archive-plugin
    file-roller
    starship
    papirus-icon-theme
    ttf-jetbrains-mono-nerd
    noto-fonts-emoji
    lxappearance
    xfce4-settings
    nwg-look-bin
    sddm
    visual-studio-code-bin
)

# Function to install the given package.
install_package() {
    # Don't install the package if it's already on the system.
    if yay -Q $1 &>> /dev/null ; then
        echo -e "$COK - $1 is already installed; skipping."
    else
        echo -en "$CNT - Installing $1."
        yay -S --noconfirm $1 &>> $INSTLOG &

        # Handle installation errors
        if yay -Q $1 &>> /dev/null ; then
            echo -e "$COK - $1 has been installed."
        else
            echo -e "$CER - $1 was not installed. Check 'install.log' for more information."
            exit
        fi
    fi
}

clear

# Prompt the user about the script.
echo -e "$CNT - You are about to execute a script that will install all of Jess' Arch Linux packages and configurations."
sleep 1

# Check if executing in a VM
is_vm=$(hostnamectl | grep Chassis)
if [[ $is_vm == *"vm"* ]]; then
    echo -e "$CWR - Your system was detected to be running in a VM. Do note that some packages - namely Hyprland - are not fully supported on virtual machines which may lead to critical errors or outright failures."
    sleep 1
fi

# Let the user know that we will require SUDO usage
echo -e "$CNT - The script runs commands that requires administrative priveledges and will require you to enter your password. If you are worried about entering your password, please review the content of this script."
sleep 1

# Give the user an option to exit the prompt.
read -rep $'[\e[1;33mACTION\e[0m] - Would you like to continue with the installation process? (y,n) ' CONTINST
if [[ $CONTINST == "Y" || $CONTINST == "y" ]]; then
    echo -e "$CNT - Beginning installation.."
    sudo touch /tmp/hyprv.tmp
else
    echo -e "$CNT - This script will now exit. No changes were made to your system."
    exit
fi

# Attempt to detect if the user has an NVIDIA GPU.
if lspci -k | grep -A 2 -E "(VGA|3D)" | grep -iq nvidia; then
    has_nvidia_gpu=true
else
    has_nvidia_gpu=false
fi

# Prompt the user about disabling wifi powersaving.
echo -e "$CNT - WiFi Powersave can cause intermittent outages when connected to a network."
read -rep $'[\e[1;33mACTION\e[0m] - Would you like to disable WiFi powersave? (y,n) ' WIFI
if [[ $WIFI == "Y" || $WIFI == "y" ]]; then
    LOC="/etc/NetworkManager/conf.d/wifi-powersave.conf"
    echo -e "$CNT - The following file has been created $LOC.\n"
    echo -e "[connection]\nwifi.powersave = 2" | sudo tee -a $LOC &>> $INSTLOG
    echo -en "$CNT - Restarting NetworkManager service, Please wait."
    sleep 2
    sudo systemctl restart NetworkManager &>> $INSTLOG

    #wait for services to restore (looking at you DNS)
    for i in {1..6}
    do
        echo -n "."
        sleep 1
    done

    echo -en "Done!\n"
    sleep 2
    echo -e "\e[1A\e[K$COK - NetworkManager restart completed."
fi

# Check for the YAY package manager.
if [ ! -f /sbin/yay ]; then
    echo -en "$CNT - Configuering yay."
    git clone https://aur.archlinux.org/yay.git &>> $INSTLOG
    cd yay
    makepkg -si --noconfirm &>> ../$INSTLOG &

    if [ -f /sbin/yay ]; then
        echo -e "\e[1A\e[K$COK - yay configured"
        cd ..

        # update the yay database
        echo -en "$CNT - Updating yay."
        yay -Suy --noconfirm &>> $INSTLOG &
        show_progress $!
        echo -e "\e[1A\e[K$COK - yay updated."
    else
        echo -e "\e[1A\e[K$CER - yay install failed. Check 'install.log' for more information."
        exit
    fi
fi

# Begin installing the packages listed at the beginning of the script.
read -rep $'[\e[1;33mACTION\e[0m] - Would you like to install the packages? (y,n) ' INST
if [[ $INST == "Y" || $INST == "y" ]]; then
    # Update core repositories.
    echo -e "$CNT - Updating core repositories. This may take a while."
    sudo pacman -Syu

    # Install all required packages
    echo -e "$CNT - Prep Stage - Installing necessary packages. This may take a while."
    for SOFTWARE_PACKAGE in ${necessary_packages[@]}; do
        install_software $SOFTWARE_PACKAGE
    done

    # Install NVIDIA drivers and packages if applicable.
    if [[ "$ISNVIDIA" == true ]]; then
        echo -e "$CNT - We found an Nvidia GPU; installing necessary packages. This may take a while."
        for SOFTWARE_PACKAGE in ${nvidia_stage[@]}; do
            install_software $SOFTWARE_PACKAGE
        done

        # update config
        sudo sed -i 's/MODULES=()/MODULES=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)/' /etc/mkinitcpio.conf
        sudo mkinitcpio --config /etc/mkinitcpio.conf --generate /boot/initramfs-custom.img
        echo -e "options nvidia-drm modeset=1" | sudo tee -a /etc/modprobe.d/nvidia.conf &>> $INSTLOG
    fi

    # Install Hyprland
    echo -e "$CNT - Installing Hyprland. This may take a while."
    if [[ "$ISNVIDIA" == true ]]; then
        #check for hyprland and remove it so the -nvidia package can be installed
        if yay -Q hyprland &>> /dev/null ; then
            yay -R --noconfirm hyprland &>> $INSTLOG &
        fi
        install_software hyprland-nvidia
    else
        install_software hyprland
    fi

    # Install the main packages.
    echo -e "$CNT - Installing main packages. This may take a while."
    for SOFTWARE_PACKAGE in ${optional_packages[@]}; do
        install_software $SOFTWARE_PACKAGE
    done

    # Install Docker
    echo -e "$CNT - Installing Docker. This may take a while."
    sudo pacman -S --noconfirm docker
    sudo systemctl enable --now docker.service &>> $INSTLOG
    sudo usermod -aG docker $USER

    # Start the bluetooth service.
    echo -e "$CNT - Starting the Bluetooth Service."
    sudo systemctl enable --now bluetooth.service &>> $INSTLOG
    sleep 2

    # Enable the sddm login manager service.
    echo -e "$CNT - Enabling the SDDM Service."
    sudo systemctl enable sddm &>> $INSTLOG
    sleep 2

    # Clean out other portals.
    echo -e "$CNT - Cleaning out conflicting xdg portals."
    yay -R --noconfirm xdg-desktop-portal-gnome xdg-desktop-portal-gtk &>> $INSTLOG
fi

# Copy over my config files to the new system's .config directory.
read -rep $'[\e[1;33mACTION\e[0m] - Would you like to copy over my config files? (y,n) ' CFG
if [[ $CFG == "Y" || $CFG == "y" ]]; then
    echo -e "$CNT - Copying over the configuration files.."

    # Copy everything over to the user's .config directory.
    cp -R . ~/.config

    # Remove this script copy from the user's .config directory.
    rm ~/.config/dotfile_setup

     # Set the units of measurement
    echo -e "$CNT - Attempring to set units of measurement."
    if locale -a | grep -q ^en_US; then
        echo -e "$COK - Units of measurement has been set to imperial."
        ln -sf ~/.config/HyprV/waybar/conf/mesu-imp.jsonc ~/.config/HyprV/waybar/conf/mesu.jsonc
        sed -i 's/SET_MESU=""/SET_MESU="I"/' ~/.config/HyprV/hyprv.conf
    else
        echo -e "$COK - Units of measurement has been set to metric."
        sed -i 's/SET_MESU=""/SET_MESU="M"/' ~/.config/HyprV/hyprv.conf
        ln -sf ~/.config/HyprV/waybar/conf/mesu-met.jsonc ~/.config/HyprV/waybar/conf/mesu.jsonc
    fi

    # Setup each appliaction's config.
    # Check for existing config folders and backup existing ones.
    for DIR in hypr kitty mako swaylock waybar wlogout wofi Code
    do
        DIRPATH=~/.config/$DIR

        if [ -d "$DIRPATH" ]; then
            echo -e "$CAT - Config for $DIR located, backing up."
            mv $DIRPATH $DIRPATH-back &>> $INSTLOG
            echo -e "$COK - Backed up $DIR to $DIRPATH-back."
        fi

        # make new empty folders
        mkdir -p $DIRPATH &>> $INSTLOG
    done

    # Link up the config files
    echo -e "$CNT - Setting up the new config."
    cp ./.config/hypr/* ~/.config/hypr/
    ln -sf ./.config/kitty/kitty.conf ~/.config/kitty/kitty.conf
    ln -sf ./.config/mako/conf/config-dark ~/.config/mako/config
    ln -sf ./.config/swaylock/config ~/.config/swaylock/config
    ln -sf ./.config/waybar/conf/v4-config.jsonc ~/.config/waybar/config.jsonc
    ln -sf ./.config/waybar/style/v4-style-dark.css ~/.config/waybar/style.css
    ln -sf ./.config/wlogout/layout ~/.config/wlogout/layout
    ln -sf ./.config/wofi/config ~/.config/wofi/config
    ln -sf ./.config/wofi/style/v4-style-dark.css ~/.config/wofi/style.css
    ln -sf ./.config/Code/User/keybindings.json ~/.config/Code/User/keybindings.json
    ln -sf ./.config/Code/User/settings.json ~/.config/Code/User/settings.json
    ln -sf ./.config/Code/User/tasks.json ~/.config/Code/User/tasks.json
    ln -sf ./.config/Code/User/snippets/php.json ~/.config/Code/User/snippets/php.json

    # add the Nvidia env file to the config (if needed)
    if [[ "$ISNVIDIA" == true ]]; then
        echo -e "\nsource = ~/.config/hypr/env_var_nvidia.conf" >> ~/.config/hypr/hyprland.conf
    fi

    # Copy the SDDM theme
    echo -e "$CNT - Setting up the login screen."
    sudo cp -R ./.config/sddm_themes /usr/share/sddm/themes/
    sudo chown -R $USER:$USER /usr/share/sddm/themes/sdt
    sudo mkdir /etc/sddm.conf.d
    echo -e "[Theme]\nCurrent=sdt" | sudo tee -a /etc/sddm.conf.d/10-theme.conf &>> $INSTLOG
    WLDIR=/usr/share/wayland-sessions

    if [ -d "$WLDIR" ]; then
        echo -e "$COK - $WLDIR found"
    else
        echo -e "$CWR - $WLDIR NOT found, creating..."
        sudo mkdir $WLDIR
    fi

    # Stage the sddm .desktop file
    sudo cp .config/sddm_themes/hyprland.desktop /usr/share/wayland-sessions/

    # Setup the initial theme
    xfconf-query -c xsettings -p /Net/ThemeName -s "Adwaita-dark"
    xfconf-query -c xsettings -p /Net/IconThemeName -s "Papirus-Dark"
    gsettings set org.gnome.desktop.interface gtk-theme "Adwaita-dark"
    gsettings set org.gnome.desktop.interface icon-theme "Papirus-Dark"
    cp -f ~/.config/hypr/wallpaper/wallpaper.jpg /usr/share/sddm/themes/sdt/wallpaper.jpg

    # Update .bashrc with my starship config
    echo -e "$CNT - Updating .bashrc."
    echo -e '\neval "$(starship init bash)"' >> ~/.bashrc
    echo -e "$CNT - Copying starship config file to ~/.config."
    cp ./.config/sddm_themes/starship.toml ~/.config/
fi

# Additional prompt if nvidia packages were installed.
if [[ "$ISNVIDIA" == true ]]; then
    echo -e "$CAT - Since we attempted to setup an Nvidia GPU the script will now end and you should reboot.
    Please type 'reboot' at the prompt and hit ENTER when ready."
    exit
fi

# Prompt to start the Hyprland comp.
read -rep $'[\e[1;33mACTION\e[0m] - Would you like to start Hyprland now? (y,n) ' HYP
if [[ $HYP == "Y" || $HYP == "y" ]]; then
    exec sudo systemctl start sddm &>> $INSTLOG
else
    exit
fi

echo -e "$CNT - Script has completed! You should reboot your system."


